# char sets
any       = 0 .. 256 # Any character in the alphabet.
none      = 257
ascii     = 0 .. 127 # Ascii characters. 0..127
extend    = 0 .. 256 # Ascii extended characters. This is the range -128..127 for signed alphabets and the range 0..255 for unsigned alphabets.
lower     = 'a' .. 'z' # Lowercase characters. [a-z]
upper     = 'A' .. 'Z' # Uppercase characters. [A-Z]
digit     = '0' .. '9' # Digits. [0-9]
alpha     = upper | lower # Alphabetic characters. [A-Za-z]
alnum     = digit | alpha # Alpha numerics. [0-9A-Za-z]
xdigit    = digit | 'A' .. 'F' | 'a' .. 'f' # Hexadecimal digits. [0-9A-Fa-f]
cntrl     = 0 .. 31 # Control characters. 0..31
graph     = '!' .. '~' # Graphical characters. [!-~]
print     = ' ' .. '~' # Printable characters. [ -~]
punct     = '!' .. '/' | ':' .. '@' | ']' .. '`' | '{' .. '~' # Punctuation. Graphical characters that are not alphanumerics.
null      = 0
tab       = 9  # tabulation
lf        = 10 # line feed
ff        = 12 # form feed
cr        = 13 # carriage return
eol       = cr? lf # unix or window$ end line
vert_tab  = 11 # vertical tab
space     = tab | vert_tab | ff | lf | cr # Whitespace. [\\t\\v\\f\\n\\r ]
zlen      = '' # Zero length string
end       = { end: inp_cont = &&end; return false; } any** #

# mandatory arg: val (e.g. unsigned_int_reader[ val = 'content_length' ])
uint[ val, type = 'unsigned long' ] =
    add_attr[ 'type val;' 'sipe_data->val = 0;' ]
    digit { sipe_data->val = *data - '0'; }
    ( digit { sipe_data->val = 10 * sipe_data->val + ( *data - '0' ); } )**


# print a char
p[ msg = '' ] =
    add_prel[ '#ifdef SIPE_MAIN' ]
    add_prel[ '#include <iostream>' ]
    add_prel[ '#endif // SIPE_MAIN' ]
    { std::cout << "msg" << std::endl; }

# print "val -> $sipe_data->val"
i[ val = "*data" ] =
    add_prel[ '#ifdef SIPE_MAIN' ]
    add_prel[ '#include <iostream>' ]
    add_prel[ '#endif // SIPE_MAIN' ]
    { std::cout << "val -> '" << sipe_data->val << "'" << std::endl; }

# print a value (by default, print current char)
d[ val = "*data" ] =
    add_prel[ '#ifdef SIPE_MAIN' ]
    add_prel[ '#include <iostream>' ]
    add_prel[ '#endif // SIPE_MAIN' ]
    { std::cout << sipe_data->val; }

#
beg_var[ var_name ] = 
    add_prel[ '#ifdef SIPE_MAIN' ]
    add_prel[ '#include <string>' ]
    add_prel[ '#endif // SIPE_MAIN' ]
    add_attr[ 'SIPE_CHARP beg_var_name;' ]
    add_attr[ 'std::string var_name;' ]
    { sipe_data->beg_var_name = data + 1; }


#
end_var[ var_name ] = 
    { sipe_data->var_name = std::string( sipe_data->beg_var_name, data + 1 ); }


# should be followed by a stoping condition (e.g. ' ')
word[ __var__ ] =
    beg_var[ __var__ ]
    any*
    end_var[ __var__ ]

# read binary int little endian
uint32_bin_le[ __val__ ] =
    add_attr[ 'unsigned __val__;' 'sipe_data->__val__ = 0;' ]
    any { sipe_data->__val__  = *reinterpret_cast<const unsigned char *>( data ) <<  0; }
    any { sipe_data->__val__ += *reinterpret_cast<const unsigned char *>( data ) <<  8; }
    any { sipe_data->__val__ += *reinterpret_cast<const unsigned char *>( data ) << 16; }
    any { sipe_data->__val__ += *reinterpret_cast<const unsigned char *>( data ) << 24; }

# read binary int little endian
uint64_bin_le[ __val__, __type__ = 'quint64' ] =
    add_attr[ '__type__ __val__;' 'sipe_data->__val__ = 0;' ]
    any { sipe_data->__val__  = (__type__)*reinterpret_cast<const unsigned char *>( data ) <<  0; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) <<  8; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 16; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 24; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 32; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 40; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 48; }
    any { sipe_data->__val__ += (__type__)*reinterpret_cast<const unsigned char *>( data ) << 56; }

# read a string (char *)
str_sized[ __val__, __len__ ] =
    add_attr[ 'char *__val__;' 'sipe_data->__val__ = 0;' ]
    { sipe_data->__val__ = data + 1; data += __len__;  }

# size 32 bits then data
str_32[ __len__ = 'len', __str__ = 'str' ] =
    uint32_bin_le[ '__len__' ]
    str_sized[ __str__, 'sipe_data->__len__' ]
