<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language>
<!--  Stolen from python.xml -->
<language name="Sipe" version="1.0" kateversion="2.4" section="Scripts" extensions="*.sipe" mimetype="application/x-sipe" casesensitive="1" author="Hugo Leclerc" license="">
	<highlighting>
		<list name="prep">
			<item> include </item>
		</list>
		<list name="defs">
		</list>
		<list name="operators">
		</list>
		<list name="commands">
			<item> d </item>
                        <item> p </item>
                        <item> i </item>
                        <item> add_attr </item>
                        <item> add_decl </item>
                        <item> add_prel </item>
                        <item> str_name </item>
		</list>
		<list name="builtinfuncs">
                        <item> ascii     </item>
                        <item> any       </item>
                        <item> extend    </item>
                        <item> lower     </item>
                        <item> upper     </item>
                        <item> digit     </item>
                        <item> alpha     </item>
                        <item> alnum     </item>
                        <item> xdigit    </item>
                        <item> cntrl     </item>
                        <item> graph     </item>
                        <item> print     </item>
                        <item> punct     </item>
                        <item> null      </item>
                        <item> tab       </item>
                        <item> lf        </item>
                        <item> ff        </item>
                        <item> cr        </item>
                        <item> eol       </item>
                        <item> vert_tab  </item>
                        <item> space     </item>
                        <item> zlen      </item>
                        <item> end       </item>
                        
                        <item> uint </item>
		</list>
		<list name="specialvars">
		</list>
		<list name="bindings">
		</list>
		<list name="overloaders">
		</list>
		<list name="exceptions">
		</list>
		<contexts>
			<context name="Normal" attribute="Normal Text" lineEndContext="#stay">
				<LineContinue context="CheckForString" attribute="Normal Text"/>
				<keyword attribute="Preprocessor" String="prep" context="#stay"/>
				<keyword attribute="Definition Keyword" String="defs" context="#stay"/>
				<keyword attribute="Operator" String="operators" context="#stay"/>
				<keyword attribute="Command Keyword" String="commands" context="#stay"/>
				<keyword attribute="Flow Control Keyword" String="flow" context="#stay"/>
				<keyword attribute="Builtin Function" String="builtinfuncs" context="#stay"/>
				<keyword attribute="Special Variable" String="specialvars" context="#stay"/>
				<keyword attribute="Extensions" String="bindings" context="#stay"/>
				<keyword attribute="Exceptions" String="exceptions" context="#stay"/>
				<keyword attribute="Overloaders" String="overloaders" context="#stay"/>
				<RegExpr attribute="Normal" String="[a-zA-Z_][a-zA-Z_0-9]+" context="#stay"/>

				<RegExpr attribute="Complex" String=" ((([0-9]*\.[0-9]+|[0-9]+\.)|([0-9]+|([0-9]*\.[0-9]+|[0-9]+\.))[eE](\+|-)?[0-9]+)|[0-9]+)[jJ]" context="#stay"/>
				<Float attribute="Float" context="#stay" />
				<HlCHex attribute="Hex" context="#stay"/>
				<HlCOct attribute="Octal" context="#stay"/>
				<Int attribute="Int" context="#stay">
					<StringDetect attribute="Int" String="L" insensitive="true" context="#stay"/>
				</Int>

				<StringDetect attribute="Raw String" String="r'''" insensitive="true" context="Raw Tripple A-string"/>
				<StringDetect attribute="Raw String" String="r&quot;&quot;&quot;" insensitive="true" context="Raw Tripple Q-string"/>

				<StringDetect attribute="Raw String" String="r'" insensitive="true" context="Raw A-string"/>
				<StringDetect attribute="Raw String" String="r&quot;" insensitive="true" context="Raw Q-string"/>

				<DetectChar attribute="Comment" char="#" context="Hash comment"/>
                                <RegExpr attribute="Comment" String="u?'''" firstNonSpace="true" context="Tripple A-comment" beginRegion="Tripple A-region"/>
                                <RegExpr attribute="Comment" String="u?&quot;&quot;&quot;" firstNonSpace="true" context="Tripple Q-comment" beginRegion="Tripple Q-region"/>

				<!-- ''' -->
				<StringDetect attribute="String" String="'''" context="Tripple A-string" beginRegion="Tripple A-region"/>
				<StringDetect attribute="String" String="u'''" context="Tripple A-string" beginRegion="Tripple A-region"/>
				<!-- """ -->
				<StringDetect attribute="String" String="&quot;&quot;&quot;" context="Tripple Q-string" beginRegion="Tripple Q-region"/>
				<StringDetect attribute="String" String="u&quot;&quot;&quot;" context="Tripple Q-string" beginRegion="Tripple Q-region"/>
				<!-- ' -->
				<DetectChar attribute="String" char="'" context="Single A-string"/>
				<Detect2Chars attribute="String" char="u" char1="'" context="Single A-string"/>
				<!-- " -->
				<DetectChar attribute="String" char="&quot;" context="Single Q-string"/>
				<Detect2Chars attribute="String" char="u" char1="&quot;" context="Single Q-string"/>

				<DetectChar attribute="Normal" char="(" context="parenthesised" beginRegion="parenthesis"/>
				<DetectChar attribute="Normal" char=")" context="#pop" endRegion="parenthesis"/>

				<AnyChar attribute="Operator" String="+*/%\|=;\!&lt;&gt;!^&amp;~-" context="#stay"/>
				<RegExpr attribute="Decorator" String="@[_a-zA-Z][\._a-zA-Z0-9]*" firstNonSpace="true"/>
			</context>
			<!-- The context CheckForString only exists to catch LineContinue with \ at end of previous line. So that we don't interpret is as comment.  -->
			<context name="CheckForString" attribute="Normal Text" lineEndContext="#pop" fallthrough="true" fallthroughContext="#pop">
				<DetectSpaces/>
				<StringDetect attribute="String" String="'''" context="Tripple A-string" beginRegion="Tripple A-region"/>
				<StringDetect attribute="String" String="u'''" context="Tripple A-string" beginRegion="Tripple A-region"/>
				<!-- """ -->
				<StringDetect attribute="String" String="&quot;&quot;&quot;" context="Tripple Q-string" beginRegion="Tripple Q-region"/>
				<StringDetect attribute="String" String="u&quot;&quot;&quot;" context="Tripple Q-string" beginRegion="Tripple Q-region"/>
			</context>


			<context name="parenthesised" attribute="Normal Text" lineEndContext="#stay" noIndentationBasedFolding="true">
				<IncludeRules context="Normal" />
			</context>

			<!-- Comments -->

			<context name="Hash comment" attribute="Comment" lineEndContext="#pop">
				<IncludeRules context="##Alerts_indent" />
			</context>

			<context name="Tripple A-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
				<StringDetect attribute="Comment" String="'''" context="#pop" endRegion="Tripple A-region"/>
				<IncludeRules context="##Alerts_indent" />
			</context>

			<context name="Tripple Q-comment" attribute="Comment" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCChar attribute="Comment" context="#stay"/>
				<StringDetect attribute="Comment" String="&quot;&quot;&quot;" context="#pop" endRegion="Tripple Q-region"/>
				<IncludeRules context="##Alerts_indent" />
			</context>

			<context name="Single A-comment" attribute="Comment" lineEndContext="#stay">
				<HlCStringChar attribute="Comment" context="#stay"/>
				<DetectChar attribute="Comment" char="'" context="#pop"/>
				<IncludeRules context="##Alerts_indent" />
			</context>

			<context name="Single Q-comment" attribute="Comment" lineEndContext="#stay">
				<HlCStringChar attribute="Comment" context="#stay"/>
				<DetectChar attribute="Comment" char="&quot;" context="#pop"/>
				<IncludeRules context="##Alerts_indent" />
			</context>

			<!-- Strings -->

			<!-- format characters -->
			<context name="stringformat" attribute="String Substitution" lineEndContext="#stay">
				<!-- Python 2 style. Syntax:
				     1. start character '%'
				     2. [optional] Mapping key, e.g. '(foo)'
				     3. [optional] Conversion flags, one of '#0- +'
				     4. [optional] Minimum width, integer or '*'
				     5. [optional] Precision, '.' followed by integer or '*'
				     6. [optional] Length modifier, one of 'hlL'
				     7. conversion type, one of 'crsdiouxXeEfFgG%'
				     [Special cases: %prog and %default - see http://docs.python.org/library/optparse.html]
				-->
				<RegExpr attribute="String Substitution" String="%((\([a-zA-Z0-9_]+\))?[#0\- +]?([1-9][0-9]*|\*)?(\.([1-9][0-9]*|\*))?[hlL]?[crsdiouxXeEfFgG%]|prog|default)" context="#stay"/>
			</context>

			<context name="Tripple A-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="String Char" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="'''" context="#pop" endRegion="Tripple A-region"/>
			</context>

			<context name="Raw Tripple A-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="'''" context="#pop" endRegion="Tripple A-region"/>
			</context>

			<context name="Tripple Q-string" attribute="String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="String Char" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop" endRegion="Tripple Q-region"/>
			</context>

			<context name="Raw Tripple Q-string" attribute="Raw String" lineEndContext="#stay" noIndentationBasedFolding="true">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<StringDetect attribute="String" String="&quot;&quot;&quot;" context="#pop" endRegion="Tripple Q-region"/>
			</context>


			<context name="Single A-string" attribute="String" lineEndContext="#stay">
				<HlCStringChar attribute="String Char" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="String" char="'" context="#pop"/>
			</context>

			<context name="Single Q-string" attribute="String" lineEndContext="#stay">
				<HlCStringChar attribute="String Char" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="String" char="&quot;" context="#pop"/>
			</context>

			<context name="Raw A-string" attribute="Raw String" lineEndContext="#stay">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="Raw String" char="'" context="#pop"/>
			</context>

			<context name="Raw Q-string" attribute="Raw String" lineEndContext="#stay">
				<HlCStringChar attribute="Raw String" context="#stay"/>
				<IncludeRules context="stringformat"/>
				<DetectChar attribute="Raw String" char="&quot;" context="#pop"/>
			</context>


		</contexts>
		<itemDatas>
			<itemData name="Normal Text" defStyleNum="dsNormal" spellChecking="false"/>
			<itemData name="Definition Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Operator" defStyleNum="dsNormal" bold="1" spellChecking="false"/>
			<itemData name="String Substitution" defStyleNum="dsOthers" color="#0057ae" selColor="#ffffff"  spellChecking="false"/>
			<itemData name="Command Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Flow Control Keyword" defStyleNum="dsKeyword" spellChecking="false"/>
			<itemData name="Builtin Function" defStyleNum="dsDataType" spellChecking="false"/>
			<itemData name="Special Variable" defStyleNum="dsOthers" spellChecking="false"/>
			<itemData name="Extensions" defStyleNum="dsOthers" color="#0095ff" selColor="#ffffff" bold="1" italic="0" spellChecking="false"/>
			<itemData name="Exceptions" defStyleNum="dsOthers" color="#054d00" selColor="#ffffff" bold="1" italic="0" spellChecking="false"/>
			<itemData name="Overloaders" defStyleNum="dsOthers" color="#000e52" selColor="#ffffff" bold="1" italic="0" spellChecking="false"/>
			<itemData name="Preprocessor" defStyleNum="dsChar" spellChecking="false"/>
			<itemData name="String Char" defStyleNum="dsChar" spellChecking="false"/>
			<itemData name="Float" defStyleNum="dsFloat" spellChecking="false"/>
			<itemData name="Int" defStyleNum="dsDecVal" spellChecking="false"/>
			<itemData name="Hex" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Octal" defStyleNum="dsBaseN" spellChecking="false"/>
			<itemData name="Complex" defStyleNum="dsOthers" spellChecking="false"/>
			<itemData name="Comment" defStyleNum="dsComment"/>
			<itemData name="String" defStyleNum="dsString"/>
			<itemData name="Raw String" defStyleNum="dsString"/>
			<itemData name="Decorator" defStyleNum="dsOthers" color="#8f6b32" selColor="#ffffff" italic="0" spellChecking="false"/>
		</itemDatas>
	</highlighting>
	<general>
		<folding indentationsensitive="1" />
		<emptyLines>
			<emptyLine regexpr="(?:\s+|\s*#.*)"/>
		</emptyLines>
		<comments>
			<comment name="singleLine" start="#" position="afterwhitespace"/>
		</comments>
		<keywords casesensitive="1" additionalDeliminator="#'"/>
	</general>
</language>
